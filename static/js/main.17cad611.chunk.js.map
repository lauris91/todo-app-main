{"version":3,"sources":["App.js","index.js"],"names":["App","useState","darkMode","setDarkMode","tasks","setTasks","inputValue","setInputValue","selectedTab","setSelectedTab","filteredTasks","useMemo","filter","task","completed","itemsLeft","x","length","className","onClick","type","placeholder","onChange","e","target","value","onKeyDown","key","update","$push","id","Math","floor","random","onDragEnd","result","destination","items","splice","source","index","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","map","draggableId","toString","draggableProps","dragHandleProps","$set","$splice","uncompleted","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17cad611.chunk.js","sourcesContent":["import React, { useState, useMemo } from \"react\";\nimport update from \"immutability-helper\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(true);\n  const [tasks, setTasks] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selectedTab, setSelectedTab] = useState(\"all\");\n\n  const filteredTasks = useMemo(() => {\n    if (selectedTab === \"all\") {\n      return tasks;\n    }\n    if (selectedTab === \"active\") {\n      return tasks.filter((task) => !task.completed);\n    }\n\n    return tasks.filter((task) => task.completed);\n  }, [tasks, selectedTab]);\n\n  const itemsLeft = useMemo(\n    () => filteredTasks.filter((x) => !x.completed).length,\n    [filteredTasks]\n  );\n\n  const addTask = (key) => {\n    if (key === \"Enter\") {\n      setTasks(\n        update(tasks, {\n          $push: [\n            {\n              id: Math.floor(Math.random() * 1000),\n              task: inputValue,\n              completed: false,\n            },\n          ],\n        })\n      );\n      setInputValue(\"\");\n    }\n  };\n\n  const hanldeOnDragEnd = (result) => {\n    if (!result.destination) return;\n    const items = [...tasks];\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n\n    setTasks(items);\n  };\n\n  return (\n    <div className={`wrapper theme-${darkMode ? \"dark\" : \"light\"}`}>\n      <header>\n        <div className=\"head-content\">\n          <div className=\"main-row\">\n            <h1>TODO</h1>\n            <div\n              className=\"toggle-btn\"\n              onClick={() => setDarkMode(!darkMode)}\n            ></div>\n          </div>\n          <span className=\"input-cheat\"></span>\n          <input\n            type=\"text\"\n            placeholder=\"Create a new todo...\"\n            className=\"input\"\n            onChange={(e) => setInputValue(e.target.value)}\n            value={inputValue}\n            onKeyDown={(e) => addTask(e.key)}\n          />\n        </div>\n      </header>\n      <div className=\"main-container\">\n        <div className=\"task-container\">\n          <DragDropContext onDragEnd={hanldeOnDragEnd}>\n            <Droppable droppableId=\"tasks\">\n              {(provided) => (\n                <div {...provided.droppableProps} ref={provided.innerRef}>\n                  {filteredTasks.length && filteredTasks.length > 0 ? (\n                    filteredTasks.map(({ id, task, completed }, index) => (\n                      <Draggable\n                        key={id}\n                        index={index}\n                        draggableId={id.toString()}\n                      >\n                        {(provided) => (\n                          <div\n                            className=\"task-row\"\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            ref={provided.innerRef}\n                          >\n                            <div\n                              className={`task-status ${\n                                completed ? \"completed\" : \"\"\n                              }`}\n                              onClick={() => {\n                                setTasks(\n                                  update(tasks, {\n                                    [index]: {\n                                      $set: {\n                                        ...tasks[index],\n                                        completed: !completed,\n                                      },\n                                    },\n                                  })\n                                );\n                              }}\n                            ></div>\n                            <p>{task}</p>\n                            <div\n                              className=\"close\"\n                              onClick={() => {\n                                setTasks(\n                                  update(tasks, {\n                                    $splice: [[index, 1]],\n                                  })\n                                );\n                              }}\n                            ></div>\n                          </div>\n                        )}\n                      </Draggable>\n                    ))\n                  ) : (\n                    <div className=\"task-row task-row-empty\">\n                      <p>List is emtpy</p>\n                    </div>\n                  )}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n          <div className=\"filter-row\">\n            <div className=\"task-count\">{itemsLeft} items left</div>\n            <div className=\"filter-container\">\n              <div\n                className={`filter-item ${\n                  selectedTab === \"all\" ? \"active\" : \"\"\n                }`}\n                onClick={() => setSelectedTab(\"all\")}\n              >\n                All\n              </div>\n              <div\n                className={`filter-item ${\n                  selectedTab === \"active\" ? \"active\" : \"\"\n                }`}\n                onClick={() => setSelectedTab(\"active\")}\n              >\n                Active\n              </div>\n              <div\n                className={`filter-item ${\n                  selectedTab === \"completed\" ? \"active\" : \"\"\n                }`}\n                onClick={() => setSelectedTab(\"completed\")}\n              >\n                Completed\n              </div>\n            </div>\n            <div\n              className=\"clear-completed\"\n              onClick={() => {\n                if (selectedTab === \"completed\") return;\n                const arr = [...tasks];\n                const uncompleted = arr.filter((x) => !x.completed);\n                setTasks(\n                  update(tasks, {\n                    $set: uncompleted,\n                  })\n                );\n              }}\n            >\n              Clear completed\n            </div>\n          </div>\n        </div>\n        <footer>Drag and drop to reorder list</footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/styles.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}